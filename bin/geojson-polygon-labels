#!/usr/bin/env node

const fs = require('fs');
const argv = require('yargs')
    .demandCommand(1)
    .option('verbose', {
        alias: 'v',
        default: false
    })
    .option('precision', {
        alias: 'p',
        describe: 'Polylabel precision',
        default: 0.001
    })
    .option('include-area', {
        alias: 'a',
        describe: 'Adds an _area property in mÂ²',
        default: false
    })
    .option('label', {
        alias: 'l',
        choices: ['polylabel', 'centroid', 'center-of-mass'],
        describe: 'Label placement algorithm',
        default: 'polylabel'
    })
    .argv;
const polylabel = require('polylabel');
const flatten = require('geojson-flatten');
const turf = {
    featureEach: require('@turf/meta').featureEach,
    area: require('@turf/area'),
    point: require('@turf/helpers').point,
    centroid: require('@turf/centroid'),
    centerOfMass: require('@turf/center-of-mass'),
    featureCollection: require('@turf/helpers').featureCollection
};
const streamFeaturesFromFile = require('@mapbox/stream-features-from-file');

const verbose = argv.v || argv.verbose;
const precision = argv.precision || 0.001;
const includeArea = argv['include-area'];

if (verbose) console.error('Reading and parsing JSON...');
const featureStream = streamFeaturesFromFile(argv._[0]);

if (verbose) console.error('Using ' + argv.label + ' labelling algorith.');

let labelFeatures = [];
let featureCount = 0;
featureStream.on('data', (feature) => {
    featureCount++;
    process.stderr.write('...' + featureCount + "\r");
    if (feature.geometry) {
        const flatFeatures = flatten(feature);
        flatFeatures.forEach((feature) => {
            if (feature.geometry && feature.geometry.type == 'Polygon') {
                // find pole of inaccessibility
                let labelPoint;
                
                if (argv.label == 'centroid') {
                    labelPoint = turf.centroid(feature).geometry.coordinates.map((coordinate) => {
                        return Number(coordinate.toFixed(5));
                    });
                } else if (argv.label == 'center-of-mass') {
                    labelPoint = turf.centerOfMass(feature).geometry.coordinates.map((coordinate) => {
                        return Number(coordinate.toFixed(5));
                    });
                } else {
                    labelPoint = polylabel(feature.geometry.coordinates, precision).map((coordinate) => {
                        return Number(coordinate.toFixed(5));
                    });
                }

                let labelProperties = feature.properties;

                if (includeArea) {
                    // calculate polygon area
                    const area = turf.area(feature)

                    labelProperties = Object.assign(
                        {
                            _area: Math.round(area)
                        },
                        labelProperties
                    )
                }

                // create a new GeoJSON feature from the pole of inaccessibility, the original properties plus an _area property
                const labelFeature = turf.point(
                    labelPoint,
                    labelProperties
                );
                labelFeatures.push(labelFeature);
            }else{
                if (feature.geometry) {
                    // warn the users that non Polygon features are ignored
                    console.error('Skipping feature with geometry type ' + feature.geometry.type);
                }else{
                    // only print this when verbose enabled since it's not something a user would need to worry about
                    if (verbose) console.error('Skipping feature with no geometry');
                }
            }
        });
    }
});

featureStream.on('end', () => {
    // collect all features into a GeoJSON object
    var outputGeoJSON = turf.featureCollection(labelFeatures);

    // write GeoJSON to stdout
    if (verbose) console.error('Writting GeoJSON...');
    process.stdout.write(JSON.stringify(outputGeoJSON));
});
