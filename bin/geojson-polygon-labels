#!/usr/bin/env node

'use strict';

const fs = require('fs');
const argv = require('yargs')
    .usage("$0 [--precision=0.001] [--include-area] [--label=polylabel] [--style=explode] [--include-minzoom] [--minzoom=0] [--maxzoom=16] [--verbose] <layer.geojson> > <labels.geojson>")
    .option('verbose', {
        alias: 'v',
        boolean: true,
        default: false
    })
    .option('precision', {
        alias: 'p',
        describe: 'Polylabel precision',
        default: 0.001
    })
    .option('include-area', {
        alias: 'a',
        boolean: true,
        describe: 'Adds an _area property in mÂ²',

        default: false
    })
    .option('include-minzoom', {
        alias: 'm',
        boolean: true,
        describe: 'Adds a the tippecanoe minzoom property',
        default: false
    })
    .option('minzoom', {
        alias: 'min',
        describe: 'Minimum zoom for tippecanoe minzoom calculation',
        default: 0
    })
    .option('maxzoom', {
        alias: 'max',
        describe: 'Maximum zoom for tippecanoe minzoom calculation',
        default: 16
    })
    .option('label', {
        alias: 'l',
        choices: ['polylabel', 'centroid', 'center-of-mass'],
        describe: 'Label placement algorithm',
        default: 'polylabel'
    })
    .option('style', {
        alias: 's',
        choices: ['explode', 'largest', 'combine'],
        describe: 'How to place labels for GeometryCollections or Multi* Geometry types',
        default: 'explode'
    })
    .help('h', 'Show help.').alias('h', 'help')
    .argv;

if (argv._.length < 1) {
    console.error('Source file required. Invoke with --help for help.');
    process.exit(1);
}

const polylabel = require('polylabel');
const flatten = require('geojson-flatten');
const turf = {
    featureEach: require('@turf/meta').featureEach,
    area: require('@turf/area'),
    point: require('@turf/helpers').point,
    centroid: require('@turf/centroid'),
    centerOfMass: require('@turf/center-of-mass'),
    featureCollection: require('@turf/helpers').featureCollection,
    convex: require('@turf/convex'),
    explode: require('@turf/explode')
};
const streamFeaturesFromFile = require('@mapbox/stream-features-from-file');

const verbose = argv.v || argv.verbose;
const precision = argv.precision || 0.001;
const includeArea = argv['include-area'];
const style = argv['style'];
const includeMinzoom = argv['include-minzoom'];
const minZoomMin = argv['minzoom'];
const minZoomMax = argv['maxzoom'];

if (verbose) console.error('Reading and parsing JSON...');
const featureStream = streamFeaturesFromFile(argv._[0]);

if (verbose) console.error('Using ' + argv.label + ' labelling algorith.');

if (argv.style == 'explode')
    console.error('Exploding Multi* and GeometryCollection geometries into flat geometries and labelling all parts.');

if (argv.style == 'single')
    console.error('Exploding Multi* and GeometryCollection geometries into flat geometries and labelling only the largest part.');

if (argv.style == 'combine')
    console.error('Combining Multi* and GeometryCollection geometries together and creating one label to cover everything.');

let labelFeatures = [];
let featureCount = 0;
featureStream.on('data', (inputFeature) => {
    featureCount++;
    process.stderr.write('...' + featureCount + "\r");
    if (inputFeature.geometry) {
        let flatFeatures;
        if (argv.style == 'explode') {
            // Flatten MultiPoint, MultiPolygon, MultiLineString, and GeometryCollection geometries in GeoJSON files into simple non-complex geometries.
            flatFeatures = flatten(inputFeature);
        } else if (argv.style == 'largest') {
            flatFeatures = [flatten(inputFeature).filter((f) => f.geometry.type == 'Polygon')
                .reduce((prev, current) => (turf.area(prev) > turf.area(current)) ? prev : current)];
        } else if (argv.style == 'combine') {
            flatFeatures = [turf.convex(turf.explode(inputFeature))];
        } else {
            console.error('Unexpected usage of --style');
            process.exit(1);
        }
        flatFeatures.forEach((feature) => {
            if (feature.geometry && feature.geometry.type == 'Polygon') {
                // find pole of inaccessibility
                let labelPoint;
                
                if (argv.label == 'centroid') {
                    labelPoint = turf.centroid(feature).geometry.coordinates.map((coordinate) => {
                        return Number(coordinate.toFixed(5));
                    });
                } else if (argv.label == 'center-of-mass') {
                    labelPoint = turf.centerOfMass(feature).geometry.coordinates.map((coordinate) => {
                        return Number(coordinate.toFixed(5));
                    });
                } else {
                    labelPoint = polylabel(feature.geometry.coordinates, precision).map((coordinate) => {
                        return Number(coordinate.toFixed(5));
                    });
                }

                let labelProperties = inputFeature.properties;
                let tippecanoeProperties;

                if (includeArea || includeMinzoom) {
                    // calculate polygon area
                    const area = turf.area(feature);

                    if (includeArea) {
                        labelProperties = Object.assign(
                            {
                                _area: Math.round(area),
                            },
                            labelProperties
                        );
                    }

                    if (includeMinzoom) {
                        tippecanoeProperties = {
                            minzoom: areaToZoom(area, minZoomMin, minZoomMax)
                        };
                    }
                }

                // create a new GeoJSON feature from the pole of inaccessibility, the original properties plus an _area property
                const labelFeature = turf.point(
                    labelPoint,
                    labelProperties
                );
                if (tippecanoeProperties) {
                    labelFeature.tippecanoe = tippecanoeProperties;
                }
                labelFeatures.push(labelFeature);
            }else{
                if (feature.geometry) {
                    // warn the users that non Polygon features are ignored
                    console.error('Skipping feature with geometry type ' + feature.geometry.type);
                    console.error(JSON.stringify(feature, null, 2));
                }else{
                    // only print this when verbose enabled since it's not something a user would need to worry about
                    if (verbose) console.error('Skipping feature with no geometry');
                }
            }
        });
    }
});

featureStream.on('end', () => {
    // collect all features into a GeoJSON object
    var outputGeoJSON = turf.featureCollection(labelFeatures);

    // write GeoJSON to stdout
    if (verbose) console.error('Writting GeoJSON...');
    process.stdout.write(JSON.stringify(outputGeoJSON));
});

function areaToZoom(area, min, max) {
    return Math.max(min, Math.min(max, Math.round(13.9670060423554 - (0.428698399307115 * Math.log(area, 2)))));
}
